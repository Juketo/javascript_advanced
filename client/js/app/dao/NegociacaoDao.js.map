{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EACA;AAAA;;AACI,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EACT;AAAA;;AACI,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIC,UAAU,MAAKN,WAAL,CACKO,WADL,CACiB,CAAC,MAAKN,MAAN,CADjB,EACgC,WADhC,EAEKO,WAFL,CAEiB,MAAKP,MAFtB,EAGKQ,GAHL,CAGSP,UAHT,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,aACpB;AACIN;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,aAClB;AACIC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAJD;AAKH,yBAjBM,CAAP;AAkBH;;;iDAGD;AAAA;;AACI,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;AACAF,mCAAOP,SAAP,GAAmB,aACnB;AACI;AACA,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,oCAAID,KAAJ,EACA;AACI,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CACbyB,KAAKG,KADQ,EACDH,KAAKI,WADJ,EACiBJ,KAAKK,MADtB,CAAjB;;AAGAP,0CAAMQ,QAAN;AACH,iCARD,MAUA;AACI;AACAxB,4CAAQe,WAAR;AACH;AACJ,6BAnBD;;AAqBAF,mCAAON,OAAP,GAAiB,aACjB;AACIC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAAT,CAAea,IAA3B;AACAxB,uCAAO,wCAAP;AACH,6BAJD;AAKH,yBAlCM,CAAP;AAmCH;;;iDAGD;AAAA;;AACI,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT6B,KAHS,EAAd;;AAKAxB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,kCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAClB;AACIC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAJD;AAKH,yBAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao\r\n{\r\n    constructor(connection)\r\n    {\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao)\r\n    {\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            let request = this._connection\r\n                              .transaction([this._store], 'readwrite')\r\n                              .objectStore(this._store)\r\n                              .add(negociacao);\r\n\r\n            request.onsuccess = e =>\r\n            {\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e =>\r\n            {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar a negociação');\r\n            };\r\n        });\r\n    }\r\n\r\n    listaTodos()\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n            cursor.onsuccess = e => \r\n            {\r\n                // ele é um ponteiro para a negociacao atual\r\n                let atual = e.target.result;\r\n\r\n                if (atual)\r\n                {\r\n                    let dado = atual.value;\r\n                    \r\n                    negociacoes.push(new Negociacao(\r\n                        dado._data, dado._quantidade, dado._valor));\r\n\r\n                    atual.continue();\r\n                }\r\n                else\r\n                {\r\n                    // quando nao tiver mais nenhum\r\n                    resolve(negociacoes);\r\n                }\r\n            }\r\n\r\n            cursor.onerror = e => \r\n            {\r\n                console.log(e.target.error.name);\r\n                reject('Não foi possível listar as negociações');\r\n            }\r\n        });\r\n    }\r\n\r\n    apagaTodos()\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve('Negociações apagadas com sucesso');\r\n\r\n            request.onerror = e => \r\n            {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível apagar as negociações');\r\n            }\r\n        });\r\n    }\r\n}"]}