{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","cb","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente","NegociacaoServiceOutro"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService\r\n{\r\n\r\n    constructor()\r\n    {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    // cb -> callback\r\n    obterNegociacoesDaSemana()\r\n    {\r\n        // resolve é função de retorno de sucesso; reject passa o erro\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                      resolve(negociacoes.map(objeto => new Negociacao(\r\n                        new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                      })\r\n                      .catch(erro => {\r\n                        console.log(erro);\r\n                        reject('Não foi possível obter as negociações da semana')\r\n                      })\r\n            \r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior(cb)\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                      resolve(negociacoes.map(objeto => new Negociacao(\r\n                        new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                      })\r\n                      .catch(erro => {\r\n                        console.log(erro);\r\n                        reject('Não foi possível obter as negociações da semana anterior')\r\n                      })\r\n            \r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada(cb)\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                      resolve(negociacoes.map(objeto => new Negociacao(\r\n                        new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                      })\r\n                      .catch(erro => {\r\n                        console.log(erro);\r\n                        reject('Não foi possível obter as negociações da semana retrasada')\r\n                      })\r\n            \r\n        });\r\n    }\r\n\r\n    obterNegociacoes()\r\n    {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    // usando este método, no NegociacaoControler ficaria assim:\r\n    // importaNegociacoes() {\r\n\r\n    //     let service = new NegociacaoService();\r\n    //     service\r\n    //     .obterNegociacoes()\r\n    //     .then(negociacoes => {\r\n    //       negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n    //       this._mensagem.texto = 'Negociações do período importadas com sucesso';\r\n    //     })\r\n    //     .catch(error => this._mensagem.texto = error);  \r\n    // }\r\n\r\n    cadastra(negociacao)\r\n    {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso!')\r\n            .catch(erro => \r\n            {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            });\r\n    }\r\n    \r\n    lista()\r\n    {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro =>\r\n            {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter todas as negociações');\r\n            });\r\n    }\r\n\r\n    apaga()\r\n    {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso!')\r\n            .catch(erro =>\r\n            {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações');\r\n            })\r\n    }\r\n\r\n    importa(listaAtual)\r\n    {\r\n        //promisse é assíncrona\r\n            return this.obterNegociacoes()\r\n                    // filtra para só adicionar as que não tem na lista\r\n                    .then(negociacoes => \r\n                        negociacoes.filter(negociacao => \r\n                            !listaAtual.some(negociacaoExistente => \r\n                                negociacao.isEquals(negociacaoExistente)))\r\n                            // \"!\" pq retorna false, só adicionando as que nao existem\r\n                    )\r\n                    .catch(erro => \r\n                    {\r\n                        console.log(erro);\r\n                        throw new Error('Não foi possível importar as negociações');\r\n                    });\r\n    }\r\n}\r\n\r\n// como HttpService retorna uma promisse, daria para não nao retornar uma nova\r\nclass NegociacaoServiceOutro {\r\n    constructor() {\r\n\r\n        this._http = new HttpService();\r\n    }\r\n    obterNegociacoesDaSemana() {\r\n        return this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                console.log(negociacoes);\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana');\r\n            });  \r\n    }\r\n}\r\n\r\n"]}