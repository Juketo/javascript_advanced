{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","objeto","props","acao","Proxy","get","target","prop","receiver","includes","_ehFuncao","console","log","retorno","Reflect","apply","arguments","set","value","func","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAaA,Y;;;;;;;2CAEKC,M,EAAQC,K,EAAOC,I,EAC7B;AACI,+BAAO,IAAIC,KAAJ,CAAUH,MAAV,EACP;AAIII,+BAJJ,eAIQC,MAJR,EAIgBC,IAJhB,EAIsBC,QAJtB,EAIgC;AAC5B;AACI;AACA;AACA;AACA,oCAAIN,MAAMO,QAAN,CAAeF,IAAf,KAAwBP,aAAaU,SAAb,CAAuBJ,OAAOC,IAAP,CAAvB,CAA5B,EACA;AACI,2CAAO,YACP;AACII,gDAAQC,GAAR,oBAA6BL,IAA7B;;AAEA;AACA;AACA;AACA,4CAAIM,UAAUC,QAAQC,KAAR,CAAcT,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCU,SAApC,CAAd;;AAEA;AACAb,6CAAKG,MAAL;AACA,+CAAOO,OAAP;AACH,qCAZD;AAaH;;AAED;AACA,uCAAOC,QAAQT,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP;AACH,6BA5BL;AA+BIS,+BA/BJ,eA+BQX,MA/BR,EA+BgBC,IA/BhB,EA+BsBW,KA/BtB,EA+B6BV,QA/B7B,EAgCI;AACI,oCAAIK,UAAUC,QAAQG,GAAR,CAAYX,MAAZ,EAAoBC,IAApB,EAA0BW,KAA1B,EAAiCV,QAAjC,CAAd;AACA,oCAAGN,MAAMO,QAAN,CAAeF,IAAf,CAAH,EACIJ,KAAKG,MAAL;;AAEJ,uCAAOO,OAAP;AACH;AAtCL,yBADO,CAAP;AAyCH;;;8CAEgBM,I,EACjB;AACI,+BAAO,QAAOA,IAAP,yCAAOA,IAAP,cAAuBC,QAAvB,yCAAuBA,QAAvB,EAAP;AACH","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory\r\n{\r\n    static create(objeto, props, acao)\r\n    {\r\n        return new Proxy(objeto, \r\n        { // aqui é o handler, onde se colocam as traps\r\n        // get pra quando ler prop, set pra quando alterar\r\n        // target aqui seria a lista de negociações\r\n        // value é o novo valor\r\n            get(target, prop, receiver) /*: function*/\r\n            {\r\n                // checa se a propriedade lida (get) é um da lista passada\r\n                // e é uma função\r\n                // props contém as propriedades que quer monitorar? ex: esvazia, adiciona\r\n                if (props.includes(prop) && ProxyFactory._ehFuncao(target[prop]))\r\n                {\r\n                    return function()\r\n                    {\r\n                        console.log(`interceptando ${prop}`)\r\n\r\n                        // substitui o adiciona ou esvazia no Proxy, por uma nova função.\r\n                        // arguments é variável implícita que dá acesso a \r\n                        // todos parâmetros da função quando é chamada\r\n                        let retorno = Reflect.apply(target[prop], target, arguments);\r\n\r\n                        //self._negociacoesView.update(target);\r\n                        acao(target)\r\n                        return retorno;\r\n                    }\r\n                }\r\n                \r\n                // segue o baile\r\n                return Reflect.get(target, prop, receiver);\r\n            },\r\n\r\n            // para garantir que todas propriedades vão ser disparadas\r\n            set(target, prop, value, receiver) \r\n            {\r\n                let retorno = Reflect.set(target, prop, value, receiver);\r\n                if(props.includes(prop))\r\n                    acao(target);\r\n                    \r\n                return retorno;\r\n            }\r\n        });\r\n    }\r\n\r\n    static _ehFuncao(func)\r\n    {\r\n        return typeof(func) == typeof(Function);\r\n    }\r\n}"]}