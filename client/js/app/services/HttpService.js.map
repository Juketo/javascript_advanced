{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","fetch","then","_handleErrors","res","json","ok","Error","statusText","dado","setRequestHeader","stringify","headers","method","body"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;8CAECC,G,EACV;AACI,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;;AAEAD,gCAAIE,IAAJ,CAAS,KAAT,EAAgBN,GAAhB;;AAEAI,gCAAIG,kBAAJ,GAAyB,YAAM;;AAE3B;AACA;AACA;AACA;AACA;;AAEA,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EACA;AACI,wCAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;AACvB;AACIP,oDAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,yCAHD,MAKA;AACIT,+CAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,6BAnBD;;AAqBAR,gCAAIS,IAAJ;AACH,yBA5BM,CAAP;AA6BH;;;wCAEGb,G,EACJ;AAAA;;AACI,+BAAOc,MAAMd,GAAN,EACNe,IADM,CACD;AAAA,mCAAO,MAAKC,aAAL,CAAmBC,GAAnB,CAAP;AAAA,yBADC,EAENF,IAFM,CAED;AAAA,mCAAOE,IAAIC,IAAJ,EAAP;AAAA,yBAFC,CAAP;AAGH;;;kDAEaD,G,EACd;AACI,4BAAI,CAACA,IAAIE,EAAT,EACI,MAAM,IAAIC,KAAJ,CAAUH,IAAII,UAAd,CAAN;;AAEJ,+BAAOJ,GAAP;AACH;;;+CAEUjB,G,EAAKsB,I,EAChB;AACI,+BAAO,IAAIrB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,MAAT,EAAiBN,GAAjB,EAAsB,IAAtB;AACAI,gCAAImB,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAnB,gCAAIG,kBAAJ,GAAyB,YAAM;;AAE3B,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;;AAErB,wCAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;;AAEnBP,gDAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,qCAHD,MAGO;;AAEHT,+CAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,6BAZD;AAaA;AACA;AACAR,gCAAIS,IAAJ,CAASH,KAAKc,SAAL,CAAeF,IAAf,CAAT;AACH,yBArBM,CAAP;AAsBH;;;yCAEItB,G,EAAKsB,I,EACV;AAAA;;AACI,+BAAOR,MAAMd,GAAN,EAAW;AACdyB,qCAAS,EAAC,gBAAiB,kBAAlB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMjB,KAAKc,SAAL,CAAeF,IAAf;AAHQ,yBAAX,EAKNP,IALM,CAKD;AAAA,mCAAO,OAAKC,aAAL,CAAmBC,GAAnB,CAAP;AAAA,yBALC,CAAP;AAMH","file":"HttpService.js","sourcesContent":["export class HttpService\r\n{\r\n    getAntigo(url)\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            xhr.open('GET', url);\r\n\r\n            xhr.onreadystatechange = () => {\r\n\r\n                // 0: requisição não iniciada\r\n                // 1: conexão com o servidor estabelecida\r\n                // 2: requisição recebida\r\n                // 3: processando requisição\r\n                // 4: requisição concluída e a resposta está pronta\r\n\r\n                if (xhr.readyState == 4)\r\n                {\r\n                    if (xhr.status == 200) // efetuada e tudo deu certo\r\n                    {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    }\r\n                    else\r\n                    {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n\r\n            xhr.send();\r\n        })\r\n    }\r\n\r\n    get(url)\r\n    {\r\n        return fetch(url)\r\n        .then(res => this._handleErrors(res))\r\n        .then(res => res.json());\r\n    }\r\n\r\n    _handleErrors(res)\r\n    {\r\n        if (!res.ok)\r\n            throw new Error(res.statusText);\r\n        \r\n        return res;\r\n    }\r\n\r\n    postAntigo(url, dado) \r\n    {\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            // usando JSON.stringifly para converter objeto em uma string no \r\n            // formato JSON.\r\n            xhr.send(JSON.stringify(dado)); \r\n        });\r\n    }\r\n\r\n    post(url, dado)\r\n    {\r\n        return fetch(url, {\r\n            headers: {'Content-type' : 'application/json'},\r\n            method: 'post',\r\n            body: JSON.stringify(dado)\r\n        })\r\n        .then(res => this._handleErrors(res))\r\n    }\r\n}"]}