{"version":3,"sources":["../../app-es6/helpers/DateHelper.js"],"names":["DateHelper","Error","texto","test","Date","split","map","item","indice","data","getDate","getMonth","getFullYear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAAaA,U;AAGT,sCACA;AAAA;;AACI;AACA,0BAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACH;;;;kDAEoBC,K,EACrB;AACI,4BAAI,CAAC,oBAAoBC,IAApB,CAAyBD,KAAzB,CAAL,EACI,MAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kEAAWG,IAAX,mCAAmBF,MAAMG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqB,UAACC,IAAD,EAAOC,MAAP;AAAA,mCAAkBD,OAAOC,SAAS,CAAlC;AAAA,yBAArB,CAAnB;AACH;;;kDAEoBC,I,EACrB;AACI;AACA,+BAAUA,KAAKC,OAAL,EAAV,UAA6BD,KAAKE,QAAL,KAAkB,CAA/C,UAAqDF,KAAKG,WAAL,EAArD;AACH","file":"DateHelper.js","sourcesContent":["export class DateHelper\r\n{\r\n\r\n    constructor()\r\n    {\r\n        // controle de erro para forçar a utilizar os métodos estáticos\r\n        throw new Error('DateHelper can not be instancied');\r\n    }\r\n\r\n    static textoParaData(texto)\r\n    {\r\n        if (!/\\d{4}-\\d{2}-\\d{2}/.test(texto))\r\n            throw new Error('Must be on yyy-MM-dd format');\r\n\r\n        // // o .value retorna string, e a classe Negociacao pede um Date, logo, precisa converter. Checar com typeof(object)\r\n        // let data = new Date(this._inputData.value.split('-'))\r\n        // // /-/g é uma regex\r\n        // let dataOpcao2 = new Date(this._inputData.value.replace(/-/g, ','))\r\n        // let dataOpcao3 = new Date\r\n        // (\r\n        //     ... // ... desmembra um array passado (no caso, montado no split) \r\n        //     this._inputData.value\r\n        //     .split('-') \r\n        //     // map é tipo um lambda que percorre o array e pode identificar [indices]\r\n        //     .map((item, indice) => // Arrow function equivale a \".map(function(item, indice)\"\r\n        //     {\r\n        //         if (indice == 1)\r\n        //         { \r\n        //             // o item no segundo índice (1) é o mês, e no Date, vai de zero até 11 (dezembro)\r\n        //             return item - 1;\r\n        //         }\r\n        //         return item;\r\n        //         // ou poderia ser \"return item - indice % 2\", o que faria nao precisar de if\r\n        //     })            \r\n        //     // Arrow function (=>) quando só uma linha, nao precisa usar {} nem return\r\n        //     //ex: .map((item, indice) => item - indice % 2)\r\n        // )\r\n\r\n        return new Date(...texto.split('-').map((item, indice) => item - indice % 2));\r\n    }\r\n\r\n    static dataParaTexto(data)\r\n    {\r\n        // para evitar concatenações, usa-se `blabla $(data) blabla`\r\n        return `${data.getDate()}/${(data.getMonth() + 1)}/${data.getFullYear()}`;\r\n    }\r\n}"]}