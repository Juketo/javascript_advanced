{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["ListaNegociacoes","Mensagem","NegociacoesView","MensagemView","NegociacaoService","DateHelper","Bind","Negociacao","NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_ordemAtual","_listaNegociacoes","_mensagem","_service","_init","lista","then","negociacoes","forEach","adiciona","negociacao","catch","texto","erro","setInterval","importaNegociacoes","event","preventDefault","_criaNegociacao","cadastra","mensagem","_limpaFormulario","importa","apaga","esvazia","textoParaData","value","parseInt","parseFloat","focus","coluna","inverteOrdem","ordena","a","b","negociacaoController","currentInstance"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["import {ListaNegociacoes} from '../models/ListaNegociacoes';\r\nimport {Mensagem} from '../models/Mensagem';\r\nimport {NegociacoesView} from '../views/NegociacoesView';\r\nimport {MensagemView} from '../views/MensagemView';\r\nimport {NegociacaoService} from '../services/NegociacaoService';\r\nimport {DateHelper} from '../helpers/DateHelper';\r\nimport {Bind} from '../helpers/Bind';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\n/*export*/ class NegociacaoController\r\n{\r\n\r\n    constructor()\r\n    {\r\n        // da para criar atalhos para \"chamamentos\". Precisa dar o bind(document) \r\n        // pq se não ele perde o contexto this\r\n        let $ = document.querySelector.bind(document); \r\n\r\n        // é melhor declarar os elementos no constructor via \"this.\" pq ele só \r\n        // chama uma vez, mesmo se adicionar N itens. Tipo cash      \r\n        this._inputData = $('#data');\r\n        this._inputQuantidade = $('#quantidade');\r\n        this._inputValor = $('#valor');\r\n\r\n        // quando a página for carregada, não tem critério. Só passa a ter \r\n        // quando ele começa a clicar nas colunas\r\n        this._ordemAtual = ''; \r\n\r\n        //let self = this;\r\n\r\n        this._listaNegociacoes = new Bind(\r\n            new ListaNegociacoes(),\r\n            new NegociacoesView($('#negociacoesView')),\r\n            'adiciona', 'esvazia', 'ordena', 'inverteOrdem');\r\n        \r\n        //this._listaNegociacoes = \r\n        //    new ListaNegociacoes(model => this._negociacoesView.update(model) );\r\n        //this._negociacoesView.update(this._listaNegociacoes);\r\n        \r\n        this._mensagem = new Bind(new Mensagem(), \r\n            new MensagemView($('#mensagemView')), 'texto');\r\n        //this._mensagemView.update(this._mensagem)\r\n\r\n        this._ordemAtual = '';\r\n\r\n        this._service = new NegociacaoService();\r\n\r\n        this._init();\r\n    }\r\n\r\n    // Initialize serve para colocar código que nao quer que fique no construtor\r\n    _init()\r\n    {\r\n\r\n        this._service.lista()\r\n                .then(negociacoes => {\r\n                    negociacoes.forEach(negociacao =>\r\n                    {\r\n                        this._listaNegociacoes.adiciona(negociacao);\r\n                    });\r\n                })\r\n                .catch(erro => this._mensagem.texto = erro);\r\n\r\n        // ConnectionFactory\r\n        //     .getConnection()\r\n        //     .then(connection => new NegociacaoDao(connection))\r\n        //     .then(dao => dao.listaTodos())\r\n        //     .then(negociacoes => \r\n        //         negociacoes.forEach(negociacao => \r\n        //             this._listaNegociacoes.adiciona(negociacao)))\r\n        //     .catch(erro => {\r\n        //         console.log(erro);\r\n        //         this._mensagem.texto = erro;\r\n        //     })\r\n\r\n            // .then(connection =>\r\n            // {\r\n            //     new NegociacaoDao(connection)\r\n            //         .listaTodos()\r\n            //         .then(negociacoes => {\r\n            //             negociacoes.forEach(negociacao =>\r\n            //             {\r\n            //                 this._listaNegociacoes.adiciona(negociacao);\r\n            //             });\r\n            //         });\r\n            // });\r\n\r\n            setInterval(() => \r\n            {\r\n                this.importaNegociacoes();\r\n            }, 3000);\r\n    }\r\n\r\n    adiciona(event)\r\n    {\r\n        event.preventDefault();\r\n\r\n        let negociacao = this._criaNegociacao();\r\n\r\n        this._service.cadastra(negociacao)\r\n                .then(mensagem => \r\n                {\r\n                    this._listaNegociacoes.adiciona(negociacao);\r\n                    this._mensagem.texto = mensagem;\r\n                    this._limpaFormulario();\r\n                })\r\n                .catch(erro => this._mensagem.texto = erro);\r\n    }\r\n\r\n    importaNegociacoes()\r\n    {\r\n        this._service.importa(this._listaNegociacoes.negociacoes)\r\n        .then(negociacoes => \r\n        {\r\n            negociacoes.forEach(negociacao => \r\n                this._listaNegociacoes.adiciona(negociacao));\r\n            this._mensagem.texto = 'Negociações do período importadas.';\r\n        })\r\n        .catch(erro => this._mensagem.texto = erro);\r\n\r\n        // // para fazer em ordem, usa-se Promise.All\r\n        // Promise.all([\r\n        //             service.obterNegociacoesDaSemana(),\r\n        //             service.obterNegociacoesDaSemanaAnterior(),\r\n        //             service.obterNegociacoesDaSemanaRetrasada()]\r\n        //            ).then(negociacoes => {\r\n        //                negociacoes\r\n        //                // como ele retorna 3 negociacoes em 3 arrays, deve-se concatená-los via reduce\r\n        //                .reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])\r\n        //                .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n        //                this._mensagem.texto = 'Negociações importadas com sucesso!';\r\n        //             })\r\n        //             .catch(erro => this._mensagem.texto = erro);\r\n\r\n    }\r\n\r\n    apaga()\r\n    {\r\n        this._service.apaga()\r\n                .then(mensagem => \r\n                {\r\n                    this._mensagem.texto = 'Negociações apagadas com sucesso!';\r\n                    this._listaNegociacoes.esvazia();\r\n                })\r\n                .catch(erro => this._mensagem.texto = erro);\r\n\r\n        // ConnectionFactory\r\n        //     .getConnection()\r\n        //     .then(connection => new NegociacaoDao(connection))\r\n        //     .then(dao => dao.apagaTodos())\r\n        //     .then(mensagem => \r\n        //     {\r\n        //         this._mensagem.texto = 'Negociações apagadas com sucesso!';\r\n        //         this._listaNegociacoes.esvazia();\r\n        //     });\r\n\r\n        //this._mensagemView.update(this._mensagem);\r\n    }\r\n\r\n    _criaNegociacao()\r\n    {\r\n        return new Negociacao\r\n        (\r\n            DateHelper.textoParaData(this._inputData.value),\r\n            parseInt(this._inputQuantidade.value), \r\n            // para garantir que salva como numerico no DB\r\n            parseFloat(this._inputValor.value)\r\n        );\r\n    }\r\n\r\n    _limpaFormulario()\r\n    {\r\n        this._inputData.value = '';\r\n        this._inputQuantidade.value = 1;\r\n        this._inputValor.value = 0.0;\r\n\r\n        this._inputData.focus();\r\n    }\r\n\r\n    ordena(coluna) \r\n    {\r\n        if(this._ordemAtual == coluna) {\r\n            this._listaNegociacoes.inverteOrdem();\r\n        } \r\n        else \r\n        {\r\n            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);    \r\n        }\r\n\r\n        this._ordemAtual = coluna;\r\n    }\r\n}\r\n\r\n// singleton para permitir reordenar as colunas\r\nlet negociacaoController = new NegociacaoController();\r\n\r\nexport function currentInstance()\r\n{\r\n    return negociacaoController;\r\n}"]}